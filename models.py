from mariadb import Connection, Cursor

from uuid import UUID
from typing import Dict

from datetime import datetime
from sys import exit
from json import load
from uuid import uuid4
from hashlib import sha512

from logger import Logger

confs = load(open("confs/conf.json", encoding="utf-8"))
queries = load(open(confs["db"]["queries"], encoding="utf-8"))

db_logger = Logger(confs["logger"]["db"])

class InvalidMariaArguments(Exception):
    def __init__(
            self, 
            message: str
        ) -> None:

        super().__init__(f"Invalid Maria Arguments! The connection establishing was failed! Full exception {message}")
        exit(-1)

class User:
    """
        User class

        :param id: user id generated by uuid4
        :type id: str

        :param email: user's email
        :type email: str

        :param login: user's login (created by user)
        :type login: str

        :param password: sha512 hash of user's password
        :type password: str

        :param createdAt: the exact time when user was created
        :type createdAt: datetime

        :param updatedAt: the time when user's info was changed
        :type updatedAt: datetime
    """

    id: UUID
    email: str
    login: str
    password: str
    createdAt: datetime
    updatedAt: datetime

    def __init__(
            self,
            id: UUID,
            email: str,
            login: str,
            password: str,
            createdAt: datetime,
            updatedAt: datetime
        ) -> None:
        
        self.id = str(id)
        self.email = email
        self.login = login
        self.password = password
        self.createdAt = createdAt
        self.updatedAt = updatedAt

class MariaConnection:
    """
        Class that established connection with MariaDB and provides plenty of operations with it
        
        :param host: hostname of a DB server (ex. "localhost"/"127.0.0.1")
        :type host: str

        :param port: port of a DB server that is installed on host
        :type port: int

        :param user: username of a user that executes queries, make sure that it has enough permissions.
        :type user: str

        :param password: user's password
        :type password: str

        :param database: name of a database that contains tables
        :type database: str
    """

    def __init__(
            self,
            host: str,
            port: int,
            user: str,
            password: str,
            database: str
        ) -> None:

        if type(port) != int:
            try:
                port = int(port)
            except Exception as e:
                exit(-1)
            
        self.args = {
            "host": host,
            "port": port,
            "user": user,
            "password": password,
            "database": database
        }

        try:
            db_logger.log(
                status="l", 
                message="Testing mariadb connection"
            )
            
            self.mariaconn = Connection(**self.args)

            db_logger.log(
                status="l", 
                message="Connection is successful"
            )

        except Exception as e:
            db_logger.log(
                status="f",
                message=f"Connection failed! Full error {e}"
            )

            raise InvalidMariaArguments
        
        self.mariaconn.close()

    def _open_session(
            self
        ) -> None:
        """
        Opens new mariadb session

        :returns: none
        :rtype: None
        """

        try:
            db_logger.log(
                status="l",
                message="Creating new mariadb session"
            )
            
            self.mariaconn = Connection(**self.args)
            self.mariaconn.autocommit = True
            self.mariaconn.auto_reconnect = True

            self.cursor = Cursor(self.mariaconn)

            db_logger.log(
                status="l",
                message="Mariadb session created successfully"
            )

        except Exception as e:
            db_logger.log(
                status="f",
                message=f"Something went wrong with mariadb. Probably it's a problem with it's args. Full exception {e}"
            )

            raise InvalidMariaArguments

    
    def _execute(
            self,
            query: str,
            data: tuple
        ) -> tuple:
        """
        Executes any query.

        :param query: sql query
        :type query: str

        :param data: data that you need to insert into query
        :type data: tuple

        :returns: empty tuple of fetched tuple
        :rtype: tuple
        """
        self._open_session()

        try:
            db_logger.log(
                status="l", 
                message="Executing query"
            )
            
            self.cursor.execute(
                statement=query,
                data=data
            )

            db_logger.log(
                status="l",
                message="Query executed successfully"
            )
        except Exception as e:
            db_logger.log(
                status="e",
                message=f"An exception was raised while executing the query. Full exception: {e}"
            )

            return ["error"]
        
        try:
            info = self.cursor.fetchall()
        except:
            return []

        if info:
            return info
        else:
            self.mariaconn.close()
            return []


        
    
    def create_user(
            self,
            email: str,
            login: str,
            password_unhashed: str,
        ) -> None:
        """
        Creating new user in database

        :param email: user's email
        :type email: str

        :param login: user's login
        :type login: str

        :param password_unhashed: unhashed password
        :type password_unhashed: str

        :returns: none
        :rtype: None
        """
        self.password_unhashed = password_unhashed
        self.password_hashed = sha512()

        self.password_hashed.update(
            self.password_unhashed.encode(
                encoding="utf-8"
            )
        )


        self.new_user = User(
            uuid4(), 
            email=email, 
            login=login, 
            password=self.password_hashed.hexdigest(),
            createdAt=datetime.now(),
            updatedAt=datetime.now()
        )

        db_logger.log(
            status="l",
            message="Creating new user"
        )

        status = self._execute(
            query=queries["create_user"],
            data=(
                self.new_user.id,
                self.new_user.email,
                self.new_user.login,
                self.new_user.password,
                self.new_user.createdAt,
                self.new_user.updatedAt,
            )
        )

        if (len(status) > 0 and status[0] != "error") or (len(status) == 0):
            db_logger.log(
                status="l",
                message="User created successfully"
            )
        else:
            db_logger.log(
                status="l",
                message="Something went wrong! Read logs higher"
            )
        

    def get_users(self) -> list:
        """
        Gets all users from table
        
        :returns: list with all users
        :rtype: list
        """
        db_logger.log(
            status="l",
            message="Getting all users"
        )

        data = self._execute(
            query=queries["get_users"],
            data=[]
       )

        if (len(data) > 0 and data[0] != "error") or (len(data) == 0):
            db_logger.log(
                status="l",
                message="Users were got successfully"
            )
        else:
            db_logger.log(
                status="l",
                message="Something went wrong! Read logs higher"
            )

        outlist = []
        for user in data:
            outlist.append({
                "id": user[0],
                "email": user[1],
                "login": user[2]
            })

        return outlist
    
    def get_user(
            self,
            id: str = "",
        ) -> list:
        """
        Gets all user's info

        :param id: user's id
        :type id: str
        
        :returns: list with all user's information
        :rtype: list
        """


        db_logger.log(
            status="l",
            message="Getting user's info"
        )

        data = self._execute(
            query=queries["get_user"],
            data=(id,)
       )

        if (len(data) > 0 and data[0] != "error") or (len(data) == 0):
            db_logger.log(
                status="l",
                message="Users were got successfully"
            )
        else:
            db_logger.log(
                status="l",
                message="Something went wrong! Read logs higher"
            )

        outlist = []
        for user in data:
            outlist.append({
                "id": user[0],
                "email": user[1],
                "login": user[2]
            })

        return outlist

    def update_user(
            self,
            id: str,
            login: str,
            email: str,
            password_unhashed: str,
        ) -> None:
        """
        Equivalent to PUT method

        :param id: current id
        :type id: str

        :param login: new login
        :type login: str

        :param email: new email
        :type email: str

        :param password_unhashed: new password
        :type password_unhashed: str

        :returns: none
        :rtype: None
        """

        try:
            db_logger.log(
                status="l",
                message="Updating user"
            )

            self._execute(
                query=queries["put_user"],
                data=(email, login, sha512(str(password_unhashed).encode("utf-8")).hexdigest(), datetime.now(), id)
            )

        except Exception as e:
            db_logger.log(
                status="e",
                message=f"Updating user failed! Full exception {e}"
            )

    def delete_user(
            self,
            id: str
        ) -> None:

        try:
            db_logger.log(
                status="l",
                message="Deleting user"
            )

            self._execute(
                query=queries["delete_user"],
                data=(id,)
            )

            db_logger.log(
                status="l",
                message="User was successfully deleted"
            )
        
        except Exception as e:
            db_logger.log(
                status="e",
                message=f"Deleting user failed! Full exception {e}"
            )